// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectG05.Data;

namespace SportApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190404180941_wouter")]
    partial class wouter
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ProjectG05.Models.Domain.Afbeelding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adres");

                    b.Property<int>("LesmateriaalId");

                    b.HasKey("Id");

                    b.ToTable("Afbeeldingen");
                });

            modelBuilder.Entity("ProjectG05.Models.Domain.Commentaar", b =>
                {
                    b.Property<DateTime>("Datum");

                    b.Property<TimeSpan>("TijdStip");

                    b.Property<int>("Id");

                    b.Property<int?>("LidId")
                        .IsRequired();

                    b.Property<string>("Lidnaam");

                    b.Property<string>("Tekst");

                    b.HasKey("Datum", "TijdStip");

                    b.HasIndex("Id");

                    b.HasIndex("LidId");

                    b.ToTable("Commentaren");
                });

            modelBuilder.Entity("ProjectG05.Models.Domain.Gebruiker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<DateTime>("Geboortedatum");

                    b.Property<string>("Geslacht");

                    b.Property<string>("Huisnummer");

                    b.Property<string>("Naam");

                    b.Property<string>("Postcode");

                    b.Property<string>("Stad");

                    b.Property<string>("Straatnaam");

                    b.Property<string>("Telefoonnummer");

                    b.Property<string>("Voornaam");

                    b.HasKey("Id");

                    b.ToTable("Gebruikers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Gebruiker");
                });

            modelBuilder.Entity("ProjectG05.Models.Domain.GebruikerSessie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GebruikerId");

                    b.Property<int?>("SessieId");

                    b.HasKey("Id");

                    b.HasIndex("GebruikerId");

                    b.HasIndex("SessieId");

                    b.ToTable("GebruikerSessie");
                });

            modelBuilder.Entity("ProjectG05.Models.Domain.Les", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("Duur");

                    b.Property<int?>("LesgeverId");

                    b.Property<TimeSpan>("StartUur");

                    b.Property<int>("Weekdag");

                    b.HasKey("Id");

                    b.HasIndex("LesgeverId");

                    b.ToTable("Lessen");
                });

            modelBuilder.Entity("ProjectG05.Models.Domain.LesLid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LesId");

                    b.Property<int?>("LidId");

                    b.HasKey("Id");

                    b.HasIndex("LesId");

                    b.HasIndex("LidId");

                    b.ToTable("LesLid");
                });

            modelBuilder.Entity("ProjectG05.Models.Domain.Lesmateriaal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Categorie");

                    b.Property<int>("Graad");

                    b.Property<string>("Naam");

                    b.Property<string>("OefeningUitlegTekst");

                    b.HasKey("Id");

                    b.ToTable("Lesmaterialen");
                });

            modelBuilder.Entity("ProjectG05.Models.Domain.Raadpleging", b =>
                {
                    b.Property<DateTime>("Datum");

                    b.Property<TimeSpan>("TijdStip");

                    b.Property<int?>("LesmateriaalId");

                    b.Property<int?>("LidId")
                        .IsRequired();

                    b.HasKey("Datum", "TijdStip");

                    b.HasIndex("LesmateriaalId");

                    b.HasIndex("LidId");

                    b.ToTable("Raadplegingen");
                });

            modelBuilder.Entity("ProjectG05.Models.Domain.Sessie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Bezig");

                    b.Property<DateTime>("Datum");

                    b.Property<TimeSpan>("Duur");

                    b.Property<int?>("LesgeverId");

                    b.Property<TimeSpan>("StartUur");

                    b.Property<int>("Weekdag");

                    b.HasKey("Id");

                    b.HasIndex("LesgeverId");

                    b.ToTable("Sessies");
                });

            modelBuilder.Entity("ProjectG05.Models.Domain.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adres");

                    b.Property<int>("LesmateriaalId");

                    b.HasKey("Id");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("ProjectG05.Models.Domain.Beheerder", b =>
                {
                    b.HasBaseType("ProjectG05.Models.Domain.Gebruiker");


                    b.ToTable("Beheerders");

                    b.HasDiscriminator().HasValue("Beheerder");
                });

            modelBuilder.Entity("ProjectG05.Models.Domain.Lesgever", b =>
                {
                    b.HasBaseType("ProjectG05.Models.Domain.Gebruiker");


                    b.ToTable("Lesgevers");

                    b.HasDiscriminator().HasValue("Lesgever");
                });

            modelBuilder.Entity("ProjectG05.Models.Domain.Lid", b =>
                {
                    b.HasBaseType("ProjectG05.Models.Domain.Gebruiker");

                    b.Property<bool>("AkkoordMetHuishoudelijkRegelement");

                    b.Property<string>("EmailOuders");

                    b.Property<string>("GeborenTe");

                    b.Property<int>("Graad");

                    b.Property<DateTime>("InschrijvingsDatum");

                    b.Property<string>("Nationaleit");

                    b.Property<string>("Rijksregisternummer");

                    b.Property<int?>("SessieId");

                    b.Property<bool>("ToestemmingAudioVisueelMateriaal");

                    b.Property<bool>("WenstInfoTeKrijgenOverClubAangelegenheden");

                    b.Property<bool>("WenstInfoTeKrijgenOverFederaleAangelegenhedenEnPromoties");

                    b.HasIndex("SessieId");

                    b.ToTable("Leden");

                    b.HasDiscriminator().HasValue("Lid");
                });

            modelBuilder.Entity("ProjectG05.Models.Domain.NietLid", b =>
                {
                    b.HasBaseType("ProjectG05.Models.Domain.Gebruiker");

                    b.Property<int>("Graad")
                        .HasColumnName("NietLid_Graad");

                    b.ToTable("NietLeden");

                    b.HasDiscriminator().HasValue("NietLid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjectG05.Models.Domain.Commentaar", b =>
                {
                    b.HasOne("ProjectG05.Models.Domain.Lesmateriaal", "Lesmateriaal")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectG05.Models.Domain.Gebruiker", "Lid")
                        .WithMany()
                        .HasForeignKey("LidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjectG05.Models.Domain.GebruikerSessie", b =>
                {
                    b.HasOne("ProjectG05.Models.Domain.Gebruiker", "Gebruiker")
                        .WithMany()
                        .HasForeignKey("GebruikerId");

                    b.HasOne("ProjectG05.Models.Domain.Sessie", "Sessie")
                        .WithMany()
                        .HasForeignKey("SessieId");
                });

            modelBuilder.Entity("ProjectG05.Models.Domain.Les", b =>
                {
                    b.HasOne("ProjectG05.Models.Domain.Gebruiker", "Lesgever")
                        .WithMany()
                        .HasForeignKey("LesgeverId");
                });

            modelBuilder.Entity("ProjectG05.Models.Domain.LesLid", b =>
                {
                    b.HasOne("ProjectG05.Models.Domain.Les", "Les")
                        .WithMany()
                        .HasForeignKey("LesId");

                    b.HasOne("ProjectG05.Models.Domain.Lid", "Lid")
                        .WithMany()
                        .HasForeignKey("LidId");
                });

            modelBuilder.Entity("ProjectG05.Models.Domain.Raadpleging", b =>
                {
                    b.HasOne("ProjectG05.Models.Domain.Lesmateriaal", "Lesmateriaal")
                        .WithMany()
                        .HasForeignKey("LesmateriaalId");

                    b.HasOne("ProjectG05.Models.Domain.Lid", "Lid")
                        .WithMany()
                        .HasForeignKey("LidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjectG05.Models.Domain.Sessie", b =>
                {
                    b.HasOne("ProjectG05.Models.Domain.Gebruiker", "Lesgever")
                        .WithMany()
                        .HasForeignKey("LesgeverId");
                });

            modelBuilder.Entity("ProjectG05.Models.Domain.Lid", b =>
                {
                    b.HasOne("ProjectG05.Models.Domain.Sessie")
                        .WithMany("LedenVoorLes")
                        .HasForeignKey("SessieId");
                });
#pragma warning restore 612, 618
        }
    }
}
